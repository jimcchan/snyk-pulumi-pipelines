version: 2.1
orbs:
  snyk: snyk/snyk@0.0.12
  pulumi: pulumi/pulumi@2.0.0  
jobs:
  unit_tests:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - run:
          name: Install Python Dependencies
          command: |
            echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV && source $BASH_ENV
            pipenv install --skip-lock
      - run:
          name: Run Tests
          command: |
            pipenv run pytest
  scan_app:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - run:
          name: Snyk Scan Application files 
          command: |
            echo "Use snyk Orb here"
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: false
  scan_push_docker_image:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build binary app and Docker image
          command: |
            echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV
            echo 'export TAG=${CIRCLE_SHA1}' >> $BASH_ENV
            echo 'export IMAGE_NAME=$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV && source $BASH_ENV
            pipenv install --skip-lock
            pipenv run pyinstaller -F hello_world.py
            docker build -t $DOCKER_LOGIN/$IMAGE_NAME -t $DOCKER_LOGIN/$IMAGE_NAME:$TAG .
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: false
          docker-image-name: $DOCKER_LOGIN/$IMAGE_NAME:$TAG
          target-file: "Dockerfile"
          project: ${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}-app
          # organization: ${SNYK_CICD_ORGANIZATION} 
      - run:
          name: Push to Docker Hub
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/$IMAGE_NAME
  deploy_to_gcp:
    docker:
      - image: circleci/node:12.19.0
        environment:
          CLOUDSDK_PYTHON: '/usr/bin/python2.7'
          GOOGLE_SDK_PATH: '~/google-cloud-sdk/'
    steps:
      - checkout
      - pulumi/login:
          access-token: ${PULUMI_ACCESS_TOKEN}
      - run:
          name: Install dependencies
          command: |
            cd ~/
            curl -o gcp-cli.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz
            tar -xzf gcp-cli.tar.gz
            echo ${GOOGLE_CLOUD_KEYS} | base64 --decode --ignore-garbage > ${HOME}/project/pulumi/gcp/orb-snyk/cicd_demo_gcp_creds.json
            ./google-cloud-sdk/install.sh  --quiet
            echo 'export PATH=$PATH:~/google-cloud-sdk/bin:~/.local/bin' >> $BASH_ENV
            source $BASH_ENV
            gcloud auth activate-service-account --key-file ${HOME}/project/pulumi/gcp/orb-snyk/cicd_demo_gcp_creds.json
      - run:
          name: npm dependencies
          command: |
            cd ${HOME}/project/pulumi/gcp/orb-snyk
            sudo npm -g install
      - pulumi/update:
          stack: k8s
          working_directory: ${HOME}/project/pulumi/gcp/orb-snyk
      - pulumi/stack_output:
          stack: k8s
          property_name: appEndpointIp
          env_var: ENDPOINT_URL
          working_directory: ${HOME}/project/pulumi/gcp/orb-snyk
  alternative_testing:
    docker:
      - image: circleci/node:12
        environment:
          CLOUDSDK_PYTHON: '/usr/bin/python2.7'
          GOOGLE_SDK_PATH: '~/google-cloud-sdk/'
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd ~/
            curl -o gcp-cli.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz
            tar -xzf gcp-cli.tar.gz
            echo ${GOOGLE_CLOUD_KEYS} | base64 --decode --ignore-garbage > ${HOME}/project/pulumi/gcp/orb-snyk/cicd_demo_gcp_creds.json
            ./google-cloud-sdk/install.sh  --quiet
            echo 'export PATH=$PATH:~/google-cloud-sdk/bin:~/.local/bin' >> $BASH_ENV
            source $BASH_ENV
            gcloud auth activate-service-account --key-file ${HOME}/project/pulumi/gcp/orb-snyk/cicd_demo_gcp_creds.json
      - run:
          name: Install Go
          command: |
            wget -q -O - https://git.io/vQhTU | bash
      - run:
          name: Run Infra Tests
          command: |
            cd ${HOME}/project/embedded-testing
            go test -v .
  verify_app_deployment:
    docker:
      - image: circleci/node:12.19.0
        environment:
          CLOUDSDK_PYTHON: '/usr/bin/python2.7'
          GOOGLE_SDK_PATH: '~/google-cloud-sdk/'
    steps:
      - checkout
      - pulumi/login:
          access-token: ${PULUMI_ACCESS_TOKEN}
      - run:
          name: Install dependencies
          command: |
            cd ~/
            curl -o gcp-cli.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz
            tar -xzf gcp-cli.tar.gz
            echo ${GOOGLE_CLOUD_KEYS} | base64 --decode --ignore-garbage > ${HOME}/project/pulumi/gcp/orb-snyk/cicd_demo_gcp_creds.json
            ./google-cloud-sdk/install.sh  --quiet
            echo 'export PATH=$PATH:~/google-cloud-sdk/bin:~/.local/bin' >> $BASH_ENV
            source $BASH_ENV
            gcloud auth activate-service-account --key-file ${HOME}/project/pulumi/gcp/orb-snyk/cicd_demo_gcp_creds.json
      - run:
          name: npm dependencies
          command: |
            cd ${HOME}/project/pulumi/gcp/orb-snyk
            sudo npm -g install
      - pulumi/stack_output:
          stack: k8s
          property_name: appEndpointIp
          env_var: ENDPOINT_URL
          working_directory: ${HOME}/project/pulumi/gcp/orb-snyk
      - run:
          name: Test Deployment
          command: |
            cd ${HOME}/project
            ./tests/smoke_test
workflows:
  build_test_deploy:
    jobs:
      - scan_app
      - unit_tests
      - scan_push_docker_image
      - deploy_to_gcp:
          requires:
            - scan_push_docker_image
      - verify_app_deployment:
          requires:
            - deploy_to_gcp
      - alternative_testing:
          requires:
            - scan_push_docker_image
